/*
 * Teleinformatic and Automation Group (GTA, Coppe, UFRJ)
 * Author: Guilherme Araujo Thomaz
 * Descripton: bridge functions for untrusted calling trusted functions and vice-versa
 */
/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"
    include "sgx_tcrypto.h"
    include "sgx_tseal.h"

    trusted {

        public sgx_status_t enclave_publication_wrapper(
            int debug,
            [in,size=576] sgx_sealed_data_t* publisher_sealed_key,
            [in,size=576] sgx_sealed_data_t* storage_sealed_key,
            [in,size=20] char* time,
            [in,size=9] char* pk,
            [in,size=7] char* type,
            [in,size=7] char* fw,
            [in,size=7] char* vn,
            [in,size=encrypted_size] uint8_t* encrypted,
            uint32_t encrypted_size,
            [out,size=2096] char* processed_data,
            [out,count=1] uint32_t* p_processed_data_size,
            [out,count=1] int* p_error_code);

        public sgx_status_t enclave_retrieve_data(
            int debug,
            [in,size=576] sgx_sealed_data_t* sealed_querier_key,
            [in,size=576] sgx_sealed_data_t* sealed_storage_key,
            [in,size=57] uint8_t* encrypted_pk,
            [in,size=encrypted_data_size] uint8_t* encrypted_data,
            uint32_t encrypted_data_size,
            [in,size=9] char* querier_pk,
            [out,size=encrypted_data_size] uint8_t* result,
            [out,count=1] int* p_error_code);

        public sgx_status_t enclave_sealing_data(
            [out,count=sealed_buffer_size]uint8_t* sealed_buffer,
            uint32_t sealed_buffer_size,
            [out,count=1] uint32_t* real_sealed_size,
            [in,count=data_size] uint8_t* data,
            uint32_t data_size);
    };

    untrusted { 

        void ocall_print_secret(
            [in,size=secret_size] uint8_t* secret, 
            uint32_t secret_size);

        void ocall_print_number(long number);

        void ocall_print_string(
            [in,size=1024]const char* text);

        void ocall_query_db(
            [out,count=1] int* p_ret,
            [in,size=2048] char* command, 
            uint32_t index, 
            [out,size=1024] char* data, 
            [out,count=1] uint32_t* p_data_size);
        
        void ocall_multi_query_db(
            [out,count=1] int* p_ret,
            [in,size=command_size] char* command,
            uint32_t command_size,  
            [out,count=10] char** datas, 
            [out,count=10] uint32_t* datas_sizes, 
            [out,count=1] uint32_t* p_data_count);
    }; 
};

